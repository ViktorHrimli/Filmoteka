var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},n={},t={},i=e.parcelRequired7c6;function s(e){const n=new Date(e.release_date).getFullYear();return{filmsName:e.original_title,filmsImg:e.poster_path,filmRelise:n,filmGanre:e.genres,filmRait:e.vote_average,id:e.id}}null==i&&((i=function(e){if(e in n)return n[e].exports;if(e in t){var i=t[e];delete t[e];var s={id:e,exports:{}};return n[e]=s,i.call(s.exports,s,s.exports),s.exports}var l=new Error("Cannot find module '"+e+"'");throw l.code="MODULE_NOT_FOUND",l}).register=function(e,n){t[e]=n},e.parcelRequired7c6=i);var l=i("3ZI3M"),a=i("cjwWu");function r({poster_path:e,original_title:n,overview:t,popularity:i,vote_average:s,vote_count:l},a){return`\n  <div class="modal">\n    <svg class="modal--icon">\n      <use xlink:href="./images/sprite.svg#close"></use>\n    </svg>\n    <div class="modal--title">\n      <div class="modal--img">\n        <img src="https://image.tmdb.org/t/p/w500${e}" alt="${n}"/>\n      </div>\n      <div class="modal--title__info">\n        <h2 class="title--text">${n}</h2>\n        <div class="conteiner--modal__list">\n          <ul class="modal--title__list--left">\n            <li class="list--element">\n              <p>Vote / Votes</p>\n            </li>\n            <li class="list--element">\n              <p>Popularity</p>\n            </li>\n            <li class="list--element">\n              <p>Original Title</p>\n            </li>\n            <li class="list--element">\n              <p>Genre</p>\n            </li>\n          </ul>\n          <ul class="modal--title__list--right">\n            <li class="list--element">\n              <p class="element--value"><span class="rait">${s.toFixed(2)}</span> / ${l.toFixed(2)}</p>\n            </li>\n            <li class="list--element">\n              <p class="element--value">${i.toFixed(2)}</p>\n            </li>\n            <li class="list--element">\n              <p class="element--value">${n}</p>\n            </li>\n            <li class="list--element">\n              <p class="element--value">${a.length<=2?[...a]:[a[0]+" "+a[1]]}</p>\n            </li>\n          </ul>\n        </div>\n        <div class="conteiner--about">\n          <p>ABOUT</p>\n          <p class="about--text">${t}</p>\n        </div>\n        <div class="conteiner--btn">\n          <button class="btn--modal" name="watched" data-action="add-to-watch">add to Watched</button>\n          <button class="btn--modal" name="queve" data-action="queve">add to queue</button>\n        </div>\n      </div>\n    </div>\n    </div>\n\n    `}function o({title:e,poster_path:n,genre_ids:t,release_date:i,vote_average:s,name:l,first_air_date:a,id:r},o){const c=function(e,n){if(e)return e;if(n)return n}(l,e),d=function(e,n){const t=parseInt(e.join(" "));let i="";return n.filter((e=>{if(e.id===t)return i+=e.name})),i}(t,o);return`\n  <li class="list--title">\n          <img name="${r}"   src="https://image.tmdb.org/t/p/w500${n}" alt="${c}" />\n        <div class="conteiner--image__title">\n          <p class="image--title">\n            ${c} <br /><span class="image--text">\n              ${d} | ${function(e,n){if(e)return e;if(n)return n}(i,a)}\n            </span>\n            <span class="rait">${s.toFixed(2)}</span>\n          </p>\n        </div>\n      </li>\n    `}var c=i("krGWQ");function d(e){for(let e of c.refs.title.children)e.addEventListener("click",p)}function p(e){c.refs.backDrop.classList.remove("is-hidden"),c.refs.backDrop.addEventListener("click",u),c.refs.backDrop.classList.contains("is-hidden")||window.addEventListener("keydown",f,{once:!0}),c.refs.backDrop.classList.contains("is-hidden")&&c.refs.backDrop.removeEventListener("click",u),v(parseInt(e.target.name))}function u(e){"backdrop"===e.target.className&&c.refs.backDrop.classList.add("is-hidden")}function f(e){if("Escape"===e.code)return c.refs.backDrop.classList.add("is-hidden")}c=i("krGWQ");let m;function v(e){let n=[];(0,a.getIdMovies)(e).then((({data:e})=>{e.genres.filter((e=>(n.push(e.name),n))),c.refs.backDrop.innerHTML="",c.refs.backDrop.insertAdjacentHTML("beforeend",r(e,n));const t=s(e);(0,l.default)(t)})).catch(console.error)}Promise.all([(0,a.createResponseTitleTrend)(),(0,a.getIdsGenres)()]).then((([{data:{results:e}},{data:{genres:n}}])=>{m=n,e.map((e=>{c.refs.title.insertAdjacentHTML("afterbegin",o(e,m))})),d()}));
//# sourceMappingURL=index.3eb9159f.js.map
